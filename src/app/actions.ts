"use server";
import { generateStartingPrompts } from '@/ai/flows/generate-starting-prompts';
import { summarizeModelResponse } from '@/ai/flows/summarize-model-response';

async function getDummyResponse(prompt: string, modelName: string) {
  await new Promise(resolve => setTimeout(resolve, 1500)); 
  return `This is a simulated response from **${modelName}** for the prompt: *"${prompt}"*.

ModelVerse is designed to be a clean and intuitive interface. Here are some of its features:

- **Model Selection**: Easily switch between models.
- **Unified Response**: Consistent output format.
- **Configuration**: Adjust parameters like temperature.

Here is a sample code block in JavaScript:
\`\`\`javascript
function greet(name) {
  // This function greets the user with the provided name.
  console.log(\`Hello, \${name}! Welcome to ModelVerse.\`);
}

greet('${modelName}');
\`\`\`

And a Python example:
\`\`\`python
def main():
    # Main function to demonstrate Python code
    model = "${modelName}"
    print(f"This response was generated by {model}.")

if __name__ == "__main__":
    main()
\`\`\`

The goal is to provide a seamless and powerful user experience.`;
}

export async function getSuggestions(modelName: string) {
  try {
    const result = await generateStartingPrompts({ modelName });
    return result.prompts;
  } catch (error) {
    console.error("Error fetching suggestions:", error);
    // Return fallback prompts on error
    return [
        `What is the history of ${modelName}?`,
        `Write a short story in the style of a noir detective, where the main character is ${modelName}.`,
        `Explain the concept of neural networks like I'm five.`,
        `Generate a python script to parse a CSV file.`,
        `What are some creative uses for ${modelName}?`
    ];
  }
}

export async function processPrompt(prompt: string, modelName: string) {
  const response = await getDummyResponse(prompt, modelName);
  
  try {
    const summaryResult = await summarizeModelResponse({ modelResponse: response });
    return {
      response,
      summary: summaryResult.summary,
    };
  } catch(error) {
    console.error("Error summarizing response:", error);
    return {
        response,
        summary: "Could not generate summary for this response.",
    }
  }
}
